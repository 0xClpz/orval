/*
 * Generated by orval v4.0.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import {
  InfiniteQueryConfig,
  MutationConfig,
  PaginatedQueryConfig,
  QueryConfig,
  useInfiniteQuery,
  useMutation,
  usePaginatedQuery,
  useQuery,
} from 'react-query';
import { CreatePetsBody, ListPetsParams, Pet, Pets } from '../model';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
  ...args: any
) => Promise<infer R>
  ? R
  : any;

export const listPets = (params?: ListPetsParams, version: number = 1) => {
  return axios.get<Pets>(`/v${version}/pets`, {
    params,
  });
};

export const getListPetsQueryKey = (
  params?: ListPetsParams,
  version: number = 1,
) => [`/v${version}/pets`, ...(params ? [params] : [])];

export const useListPetsPaginated = <Error = unknown>(
  params?: ListPetsParams,
  version: number = 1,
  queryConfig?: PaginatedQueryConfig<AsyncReturnType<typeof listPets>, Error>,
) => {
  const queryKey = getListPetsQueryKey(params, version);

  const query = usePaginatedQuery<AsyncReturnType<typeof listPets>, Error>(
    queryKey,
    () => listPets(params, version),
    { enabled: version, ...queryConfig },
  );

  return {
    queryKey,
    ...query,
  };
};
export const useListPetsInfinite = <Error = unknown>(
  params?: ListPetsParams,
  version: number = 1,
  queryConfig?: InfiniteQueryConfig<AsyncReturnType<typeof listPets>, Error>,
) => {
  const queryKey = getListPetsQueryKey(params, version);

  const query = useInfiniteQuery<AsyncReturnType<typeof listPets>, Error>(
    queryKey,
    (_, limit) => listPets({ limit, ...params }, version),
    { enabled: version, ...queryConfig },
  );

  return {
    queryKey,
    ...query,
  };
};
export const useListPets = <Error = unknown>(
  params?: ListPetsParams,
  version: number = 1,
  queryConfig?: QueryConfig<AsyncReturnType<typeof listPets>, Error>,
) => {
  const queryKey = getListPetsQueryKey(params, version);

  const query = useQuery<AsyncReturnType<typeof listPets>, Error>(
    queryKey,
    () => listPets(params, version),
    { enabled: version, ...queryConfig },
  );

  return {
    queryKey,
    ...query,
  };
};

export const createPets = (
  createPetsBody: CreatePetsBody,
  version: number = 1,
) => {
  return axios.post<unknown>(`/v${version}/pets`, createPetsBody);
};

export const useCreatePets = <Error = unknown>(
  mutationConfig?: MutationConfig<
    AsyncReturnType<typeof createPets>,
    Error,
    { data: CreatePetsBody; version?: number }
  >,
) => {
  return useMutation<
    AsyncReturnType<typeof createPets>,
    Error,
    { data: CreatePetsBody; version?: number }
  >((props) => {
    const { data, version } = props || {};

    return createPets(data, version);
  }, mutationConfig);
};
export const showPetById = (petId: string, version: number = 1) => {
  return axios.get<Pet>(`/v${version}/pets/${petId}`);
};

export const getShowPetByIdQueryKey = (petId: string, version: number = 1) => [
  `/v${version}/pets/${petId}`,
];

export const useShowPetByIdPaginated = <Error = unknown>(
  petId: string,
  version: number = 1,
  queryConfig?: PaginatedQueryConfig<
    AsyncReturnType<typeof showPetById>,
    Error
  >,
) => {
  const queryKey = getShowPetByIdQueryKey(petId, version);

  const query = usePaginatedQuery<AsyncReturnType<typeof showPetById>, Error>(
    queryKey,
    () => showPetById(petId, version),
    { enabled: version && petId, ...queryConfig },
  );

  return {
    queryKey,
    ...query,
  };
};
export const useShowPetByIdInfinite = <Error = unknown>(
  petId: string,
  version: number = 1,
  queryConfig?: InfiniteQueryConfig<AsyncReturnType<typeof showPetById>, Error>,
) => {
  const queryKey = getShowPetByIdQueryKey(petId, version);

  const query = useInfiniteQuery<AsyncReturnType<typeof showPetById>, Error>(
    queryKey,
    (_, limit) => showPetById(petId, version),
    { enabled: version && petId, ...queryConfig },
  );

  return {
    queryKey,
    ...query,
  };
};
export const useShowPetById = <Error = unknown>(
  petId: string,
  version: number = 1,
  queryConfig?: QueryConfig<AsyncReturnType<typeof showPetById>, Error>,
) => {
  const queryKey = getShowPetByIdQueryKey(petId, version);

  const query = useQuery<AsyncReturnType<typeof showPetById>, Error>(
    queryKey,
    () => showPetById(petId, version),
    { enabled: version && petId, ...queryConfig },
  );

  return {
    queryKey,
    ...query,
  };
};
