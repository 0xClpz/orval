/*
 * Generated by orval v3.1.9 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import axios, { AxiosRequestConfig, AxiosResponse, AxiosError, AxiosPromise } from 'axios';
import { useQuery, useMutation, QueryConfig, MutationConfig } from 'react-query';
import {
  CreatePetsBody,
  ListPetsParams,
  Pet,
  Pets,
} from '../model';

export const listPets = (
    params?: ListPetsParams,
    version: number = 1,
  ): AxiosPromise<Pets> => {
    type Mutator = (url: string, config?: object) => [string,  object | undefined]

    const mutator: Mutator = (url, config) => [url, { ...config, responseType: 'json' }]

    return axios.get(...mutator(
      `/v${version}/pets`,
      {
        params,
      },
    ));
  }


export const useListPets = (
    params?: ListPetsParams,
    version: number = 1,
 queryConfig?: QueryConfig<AxiosResponse<Pets>, AxiosError>
  ) => {
    return useQuery<AxiosResponse<Pets>, AxiosError>([`/v${version}/pets`, params], () => listPets(params,version), {enabled: version, ...queryConfig} )
  }
export const createPets = (
    createPetsBody: CreatePetsBody,
    version: number = 1,
  ): AxiosPromise<unknown> => {
    return axios.post(
      `/v${version}/pets`,
      createPetsBody,
    );
  }


export const useCreatePets = (
    mutationConfig?: MutationConfig<AxiosResponse<unknown>, AxiosError, {data: CreatePetsBody;version?: number}>
  ) => {
  return useMutation<AxiosResponse<unknown>, AxiosError, {data: CreatePetsBody;version?: number}>((props) => {
    const {data,version} = props || {};

    return  createPets(data,version)
  }, mutationConfig)
}
export const showPetById = (
    petId: string,
    version: number = 1,
  ): AxiosPromise<Pet> => {
    return axios.get(
      `/v${version}/pets/${petId}`,
    );
  }


export const useShowPetById = (
    petId: string,
    version: number = 1,
 queryConfig?: QueryConfig<AxiosResponse<Pet>, AxiosError>
  ) => {
    return useQuery<AxiosResponse<Pet>, AxiosError>([`/v${version}/pets/${petId}`], () => showPetById(petId,version), {enabled: version && petId, ...queryConfig} )
  }
