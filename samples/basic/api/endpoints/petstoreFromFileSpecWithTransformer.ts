/*
 * Generated by orval v5.3.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import axios,{
  AxiosRequestConfig
} from 'axios'
import type {
  Pets,
  ListPetsParams,
  CreatePetsBody,
  Pet
} from '../model'
import {
  rest
} from 'msw'
import faker from 'faker'
import listPetsMutator from '../mutator/response-type'


type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;


  export const getSwaggerPetstore = () => {
const listPets = <Data = unknown>(
    params?: ListPetsParams,
    version= 1,
 options?: SecondParameter<typeof listPetsMutator>) => {
      return listPetsMutator<Data extends unknown ? Pets : Data>(
      {url: `/v${version}/pets`, method: 'get',
        params,
    },
      // eslint-disable-next-line
// @ts-ignore
 options);
    }
  const createPets = <Data = unknown>(
    createPetsBody: CreatePetsBody,
    version= 1, options?: AxiosRequestConfig
 ) => {
    return axios.post<Data extends unknown ? unknown : Data>(
      `/v${version}/pets`,
      createPetsBody,options
    );
  }
const showPetById = <Data = unknown>(
    petId: string,
    version= 1, options?: AxiosRequestConfig
 ) => {
    return axios.get<Data extends unknown ? Pet : Data>(
      `/v${version}/pets/${petId}`,options
    );
  }
return {listPets,createPets,showPetById}};


export const getListPetsMock = () => ([...Array(faker.datatype.number({min: 1, max: 10}))].map(() => ({id: faker.datatype.number(), name: 'jon', tag: 'jon'})))

export const getShowPetByIdMock = () => ((() => ({
                id: faker.random.number({ min: 1, max: 99 }),
                name: faker.name.firstName(),
                tag: faker.helpers.randomize([faker.random.word(), undefined]),
              }))())

export const getSwaggerPetstoreMSW = () => [
rest.get('*/v:version/pets', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getListPetsMock()),
        )
      }),rest.post('*/v:version/pets', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
        )
      }),rest.get('*/v:version/pets/:petId', (req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getShowPetByIdMock()),
        )
      }),]
