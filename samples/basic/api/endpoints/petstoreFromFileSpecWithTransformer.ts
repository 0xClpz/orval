/*
 * Generated by orval v3.2.1 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import { AxiosInstance, AxiosPromise } from 'axios';
import faker from 'faker';
import { CreatePetsBody, ListPetsParams, Pet, Pets } from '../model';

export interface SwaggerPetstore {
  // List all pets
  listPets(params?: ListPetsParams, version?: number): AxiosPromise<Pets>;
  // Create a pet
  createPets(
    createPetsBody: CreatePetsBody,
    version?: number,
  ): AxiosPromise<unknown>;
  // Info for a specific pet
  showPetById(petId: string, version?: number): AxiosPromise<Pet>;
}

export const getSwaggerPetstore = (axios: AxiosInstance): SwaggerPetstore => ({
  listPets(params?: ListPetsParams, version: number = 1): AxiosPromise<Pets> {
    type Mutator = (
      url: string,
      config?: object,
    ) => [string, object | undefined];

    const mutator: Mutator = (url, config) => [
      url,
      { ...config, responseType: 'json' },
    ];

    return axios.get(
      ...mutator(`/v${version}/pets`, {
        params,
      }),
    );
  },
  createPets(
    createPetsBody: CreatePetsBody,
    version: number = 1,
  ): AxiosPromise<unknown> {
    return axios.post(`/v${version}/pets`, createPetsBody);
  },
  showPetById(petId: string, version: number = 1): AxiosPromise<Pet> {
    return axios.get(`/v${version}/pets/${petId}`);
  },
});

export const getSwaggerPetstoreMock = (): SwaggerPetstore => ({
  listPets(params?: ListPetsParams, version?: number): AxiosPromise<Pets> {
    return Promise.resolve(
      [...Array(faker.random.number({ min: 1, max: 10 }))].map(() => ({
        id: faker.random.number(),
        name: 'jon',
        tag: 'jon',
      })),
    ).then((data) => ({ data })) as AxiosPromise<Pets>;
  },
  createPets(
    createPetsBody: CreatePetsBody,
    version?: number,
  ): AxiosPromise<unknown> {
    return Promise.resolve(undefined).then((data) => ({
      data,
    })) as AxiosPromise<unknown>;
  },
  showPetById(petId: string, version?: number): AxiosPromise<Pet> {
    return Promise.resolve(
      (() => ({
        id: faker.random.number({ min: 1, max: 99 }),
        name: faker.name.firstName(),
        tag: faker.helpers.randomize([faker.random.word(), undefined]),
      }))(),
    ).then((data) => ({ data })) as AxiosPromise<Pet>;
  },
});
