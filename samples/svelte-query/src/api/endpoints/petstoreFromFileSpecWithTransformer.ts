/*
 * Generated by orval v5.0.0-alpha.6 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import {
	useMutation,
	UseMutationOptions,
	useQuery,
	UseQueryOptions
} from '@sveltestack/svelte-query';
import type { CreatePetsBody, ListPetsParams, Pet, Pets } from '../model';
import { customInstance } from '../mutator/custom-instance';

type AsyncReturnType<T extends (...args: any) => Promise<any>> = T extends (
	...args: any
) => Promise<infer R>
	? R
	: any;

export const listPets = <Data = unknown>(params?: ListPetsParams, version = 1) => {
	return customInstance<Data extends unknown ? Pets : Data>({
		url: `/v${version}/pets`,
		method: 'get',
		params
	});
};

export const getListPetsQueryKey = (params?: ListPetsParams, version = 1) => [
	`/v${version}/pets`,
	...(params ? [params] : [])
];

export const useListPets = <Data extends unknown = unknown, Error extends unknown = unknown>(
	params?: ListPetsParams,
	version = 1,
	queryConfig?: UseQueryOptions<AsyncReturnType<typeof listPets>, Error>
) => {
	const queryKey = getListPetsQueryKey(params, version);

	const query = useQuery<AsyncReturnType<typeof listPets>, Error>(
		queryKey,
		() => listPets<Data>(params, version),
		{ enabled: !!version, ...queryConfig }
	);

	return {
		queryKey,
		...query
	};
};

export const createPets = <Data = unknown>(createPetsBody: CreatePetsBody, version = 1) => {
	return customInstance<Data extends unknown ? unknown : Data>({
		url: `/v${version}/pets`,
		method: 'post',
		data: createPetsBody
	});
};

export const useCreatePets = <Data extends unknown = unknown, Error extends unknown = unknown>(
	mutationConfig?: UseMutationOptions<
		AsyncReturnType<typeof createPets>,
		Error,
		{ data: CreatePetsBody; version?: number },
		unknown
	>
) => {
	return useMutation<
		AsyncReturnType<typeof createPets>,
		Error,
		{ data: CreatePetsBody; version?: number }
	>((props) => {
		const { data, version } = props || {};

		return createPets<Data>(data, version);
	}, mutationConfig);
};
export const showPetById = <Data = unknown>(petId: string, version = 1) => {
	return customInstance<Data extends unknown ? Pet : Data>({
		url: `/v${version}/pets/${petId}`,
		method: 'get'
	});
};

export const getShowPetByIdQueryKey = (petId: string, version = 1) => [
	`/v${version}/pets/${petId}`
];

export const useShowPetById = <Data extends unknown = unknown, Error extends unknown = unknown>(
	petId: string,
	version = 1,
	queryConfig?: UseQueryOptions<AsyncReturnType<typeof showPetById>, Error>
) => {
	const queryKey = getShowPetByIdQueryKey(petId, version);

	const query = useQuery<AsyncReturnType<typeof showPetById>, Error>(
		queryKey,
		() => showPetById<Data>(petId, version),
		{ enabled: !!(version && petId), ...queryConfig }
	);

	return {
		queryKey,
		...query
	};
};
